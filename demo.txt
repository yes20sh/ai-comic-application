<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AI Comic Story Creator</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="https://unpkg.com/html-to-image@1.11.11/dist/html-to-image.min.js"></script>
  <script src="script.js" defer></script>
  <style>
    .comic-panel {
      transition: all 0.3s ease;
    }
    .comic-panel:hover {
      transform: scale(1.02);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    .loading-spinner {
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-indigo-700 mb-2">AI Comic Story Creator</h1>
      <p class="text-lg text-gray-600">Transform your creative prompts into fully illustrated comic stories</p>
    </header>

    <div class="max-w-3xl mx-auto bg-white rounded-xl shadow-md overflow-hidden p-6 mb-8">
      <div class="mb-6">
        <label for="prompt" class="block text-sm font-medium text-gray-700 mb-2">Your Comic Idea</label>
        <textarea id="prompt" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="A superhero dog who saves cats from trees but is secretly afraid of heights..."></textarea>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <label for="genre" class="block text-sm font-medium text-gray-700 mb-2">Genre</label>
          <select id="genre" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            <option value="superhero">Superhero</option>
            <option value="fantasy">Fantasy</option>
            <option value="sci-fi">Sci-Fi</option>
            <option value="romance">Romance</option>
            <option value="comedy">Comedy</option>
            <option value="horror">Horror</option>
            <option value="mystery">Mystery</option>
            <option value="action">Action</option>
            <option value="adventure">Adventure</option>
            <option value="historical">Historical</option>
            <option value="crime">Crime</option>
            <option value="thriller">Thriller</option>
            <option value="biographical">Biographical</option>
            <option value="informative">Informative</option>
            <option value="cyberpunk">Cyberpunk</option>
          </select>
        </div>

        <div>
          <label for="panels" class="block text-sm font-medium text-gray-700 mb-2">Panels</label>
          <select id="panels" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            <option value="4">4</option>
            <option value="6" selected>6</option>
            <option value="8">8</option>
            <option value="10">10</option>
          </select>
        </div>

        <div>
          <label for="art-style" class="block text-sm font-medium text-gray-700 mb-2">Art Style</label>
          <select id="art-style" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            <option value="anime">Anime</option>
            <option value="ghibli">Ghibli</option>
            <option value="american superhero">American Superhero</option>
            <option value="manga">Manga</option>
            <option value="chibi">Chibi</option>
            <option value="retro">Retro</option>
            <option value="bande dessinee">Bande Dessinée</option>
            <option value="painterly">Painterly</option>
            <option value="anthropomorphic">Anthropomorphic</option>
            <option value="minimalist">Minimalist</option>
            <option value="webtoon">Webtoon</option>
            <option value="sketchbook">Sketchbook</option>
          </select>
        </div>

        <div>
          <label for="tone" class="block text-sm font-medium text-gray-700 mb-2">Tone</label>
          <select id="tone" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            <option value="light-hearted">Light-hearted</option>
            <option value="serious">Serious</option>
            <option value="dark">Dark</option>
            <option value="humorous">Humorous</option>
            <option value="dramatic">Dramatic</option>
          </select>
        </div>

        <div>
          <label for="word-length" class="block text-sm font-medium text-gray-700 mb-2">Word Length</label>
          <select id="word-length" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            <option value="short">Short (5–10 words)</option>
            <option value="medium" selected>Medium (10–20 words)</option>
            <option value="long">Long (20–30 words)</option>
          </select>
        </div>

        <div>
          <label for="tone-ending" class="block text-sm font-medium text-gray-700 mb-2">Ending Tone</label>
          <select id="tone-ending" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            <option value="happy">Happy</option>
            <option value="bittersweet">Bittersweet</option>
            <option value="tragic">Tragic</option>
            <option value="surprise">Surprise Twist</option>
            <option value="open-ended">Open-ended</option>
          </select>
        </div>
      </div>

      <div class="flex justify-center">
        <button id="generate-btn" class="px-6 py-3 bg-indigo-600 text-white font-medium rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 flex items-center">
          <span>Generate Comic</span>
          <svg id="loading-spinner" class="hidden loading-spinner h-5 w-5 ml-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </div>
    </div>

    <div id="comic-container" class="hidden max-w-4xl mx-auto bg-white rounded-xl shadow-md overflow-hidden p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 id="comic-title" class="text-2xl font-bold text-gray-800"></h2>
        <button id="download-btn" class="px-4 py-2 bg-green-600 text-white font-medium rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
          Download Comic
        </button>
      </div>
      <div id="comic-description" class="text-gray-600 mb-6"></div>
      <div id="comic-panels" class="grid grid-cols-1 md:grid-cols-2 gap-6"></div>
    </div>

    <div id="error-message" class="hidden max-w-3xl mx-auto bg-red-50 border-l-4 border-red-500 p-4 mb-8">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p id="error-text" class="text-sm text-red-700"></p>
        </div>
      </div>
    </div>
  </div>

  <footer class="bg-gray-800 text-white py-6">
    <div class="container mx-auto px-4 text-center">
      <p>AI Comic Story Creator - Powered by Gemini AI</p>
    </div>
  </footer>
</body>
</html>


document.getElementById('generate-btn').addEventListener('click', async () => {
  const prompt = document.getElementById('prompt').value.trim();
  const genre = document.getElementById('genre').value;
  const panels = parseInt(document.getElementById('panels').value);
  const artStyle = document.getElementById('art-style').value;
  const tone = document.getElementById('tone').value;
  const wordLength = document.getElementById('word-length').value;
  const toneEnding = document.getElementById('tone-ending').value;

  const loadingSpinner = document.getElementById('loading-spinner');
  const comicContainer = document.getElementById('comic-container');
  const comicPanels = document.getElementById('comic-panels');
  const comicTitle = document.getElementById('comic-title');
  const comicDescription = document.getElementById('comic-description');
  const errorMessage = document.getElementById('error-message');
  const errorText = document.getElementById('error-text');

  // Reset
  comicContainer.classList.add('hidden');
  errorMessage.classList.add('hidden');
  comicPanels.innerHTML = '';
  loadingSpinner.classList.remove('hidden');

  if (!prompt) {
    alert('Please enter a prompt!');
    loadingSpinner.classList.add('hidden');
    return;
  }

  const API_KEY = 'AIzaSyAB_dhliD7qqi3fWFuPjyJWTrDGLVocwCk'; // ⚠️ Replace with environment-safe variable in production
  const model = 'gemini-2.0-flash-preview-image-generation';
  const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${API_KEY}`;

  const systemPrompt = `
You are a creative comic artist AI. Based on the user's idea and input, generate a short comic storyline and base64 PNG image for each panel.

Output format:
TITLE: <Comic Title>
DESCRIPTION: <Short Summary>
PANELS:
1. <Caption or dialogue for panel 1>
2. <Caption or dialogue for panel 2>
...
Each panel must have a matching base64 image (PNG format).
`;

  const userPrompt = `
Comic idea: ${prompt}
Genre: ${genre}
Tone: ${tone}
Ending Tone: ${toneEnding}
Art Style: ${artStyle}
Number of Panels: ${panels}
Preferred Word Length per panel: ${wordLength}
Please generate the comic storyline and base64 PNG images.
`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: `${systemPrompt}\n${userPrompt}` }]
        }],
        generationConfig: {
          responseModalities: ["TEXT", "IMAGE"]
        }
      })
    });

    const data = await response.json();
    console.log(data);

    let parts = data?.candidates?.[0]?.content?.parts;
    if (!parts) throw new Error("No content in response");

    let title = '';
    let description = '';
    let captions = [];
    let images = [];

    for (const part of parts) {
      if (part.text) {
        const lines = part.text.split('\n');
        for (const line of lines) {
          if (line.startsWith('TITLE:')) title = line.replace('TITLE:', '').trim();
          else if (line.startsWith('DESCRIPTION:')) description = line.replace('DESCRIPTION:', '').trim();
          else if (/^\d+\.\s/.test(line)) captions.push(line.replace(/^\d+\.\s/, '').trim());
        }
      } else if (part.inlineData?.mimeType === 'image/png') {
        images.push(part.inlineData.data);
      }
    }

    if (images.length === 0 || captions.length === 0) throw new Error("Missing image or text content");

    comicTitle.textContent = title;
    comicDescription.textContent = description;

    for (let i = 0; i < Math.min(images.length, captions.length); i++) {
      const panel = document.createElement('div');
      panel.className = 'comic-panel rounded-lg border border-gray-200 p-4 shadow-sm bg-gray-50';

      const img = document.createElement('img');
      img.src = `data:image/png;base64,${images[i]}`;
      img.alt = `Comic Panel ${i + 1}`;
      img.className = 'w-full mb-2 rounded';

      const caption = document.createElement('p');
      caption.className = 'text-sm text-gray-700';
      caption.textContent = captions[i];

      panel.appendChild(img);
      panel.appendChild(caption);
      comicPanels.appendChild(panel);
    }

    comicContainer.classList.remove('hidden');

  } catch (error) {
    console.error(error);
    errorText.textContent = 'Something went wrong while generating the comic.';
    errorMessage.classList.remove('hidden');
  } finally {
    loadingSpinner.classList.add('hidden');
  }
});

// Optional: Enable Download Button Functionality
document.getElementById('download-btn').addEventListener('click', async () => {
  const node = document.getElementById('comic-container');
  const comicTitle = document.getElementById('comic-title').textContent || 'comic';

  try {
    const dataUrl = await htmlToImage.toPng(node);
    const link = document.createElement('a');
    link.download = `${comicTitle.replace(/\s+/g, '_')}.png`;
    link.href = dataUrl;
    link.click();
  } catch (err) {
    console.error('Download failed:', err);
    alert('Failed to download comic. Try again.');
  }
});
